#!/bin/bash

set -e

ROOT_DIR=$(pwd)
LAMBDA_DIR="api/lambda"
OUTPUT_FILE="${ROOT_DIR}/terraform/lambda.tfvars"

CONFIG_KEYS=(name memory timeout runtime handler)

# Delete lambda.tfvars file if execution fails
trap 'echo "[INFO] Deleting lambda.tfvars file"; [[ "$?" == "1" ]] && { echo "help"; rm -f ${OUTPUT_FILE}; }' EXIT

# create lambda.tfvars file for terraform deployment
echo "# This file is generated by deploy script and will be rewritten on each deploy" > "$OUTPUT_FILE"

parse_config () {
  path=$1
  config="$path/main/config.json"
  # iterate over config keys and export existing ones
  if [ ! -e "$config" ]; then
    echo "[ERROR] Config file $config not found"
    exit 1
  fi

  echo "{" >> "$OUTPUT_FILE"
  echo "path=\"../$path\"," >> "$OUTPUT_FILE"
  echo "[INFO] Parsing config file $config"
  for key in "${CONFIG_KEYS[@]}"; do
    # only output existing keys
    [[ $(jq "has(\"$key\")" "$config") == "true" ]] && { value=$(jq -r ".$key" "$config"); echo "$key=\"$value\"" >> "$OUTPUT_FILE"; }
  done
  echo "}," >> "$OUTPUT_FILE"

}

build_lambdas () {
  echo "lambdas = [" >> "$OUTPUT_FILE"
  for dir in "$LAMBDA_DIR"/*; do
    src_dir="$dir/main"
    if [ -d "$src_dir" ]; then
      echo "[INFO] Processing $src_dir"

      # run rollup in each directory
      (cd "$src_dir" && yarn install --production=false && rollup -c "${ROOT_DIR}/rollup.config.mjs")
      # parse lambda config file
      parse_config "$dir"
    fi
  done
  echo "]" >> "$OUTPUT_FILE"
}

deploy () {
  build_lambdas

  cd "$ROOT_DIR/terraform"
  # change hardcoded env reference
  terraform "$1" -var-file=develop.tfvars -var-file=lambda.tfvars
}

destroy () {
  echo "Destroying infrastructure will delete all data. Only 'yes' will be accepted to confirm."
  read -r CONFIRM
  if [ "$CONFIRM" == "yes" ]; then
      deploy destroy
  else
      echo "Destroy cancelled"
  fi
}

init () {
  cd "$ROOT_DIR/terraform"
  terraform init -backend-config="init.tfvars"
}

command=$1
case $command in
  init)
    init
    ;;
  apply)
    deploy apply
    ;;
  plan)
    deploy plan
    ;;
  destroy)
    destroy
    ;;
  *)
    echo "[ERROR] Usage: $0 [apply | plan]" >&2
    exit 1
    ;;
esac

